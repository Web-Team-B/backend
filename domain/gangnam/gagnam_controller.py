from flask import Blueprint, request, jsonify
from .data_processor import get_traffic_data, get_data_with_hours


bp = Blueprint("강남", __name__, url_prefix="/api/gangnam")

# fmt: off
road_name_to_ids = {
    "강남대로": [1210030002,1210030103,1210030001,1210030102,1220030603,1220030703,1220030602,1220030702,1220030601,1220030701,1220027803,1220027903,1220027802,1220027902,1220027801,1220027901,1220025003,1220025103,1220025002,1220025102,1220021003,1220021103,1220021002,1220021102,1220021001,1220021101,1220016203,1220016304,1220016204,1220016303,1220016201,1220016301,1220011803,1220011903,1220011802,1220011902],
    "논현로" : [1220103600, 1220105400, 1220036602, 1220036704, 1220035600,1220035700, 1220034405, 1220035700, 1220034404, 1220034504,1220034406, 1220034507, 1220034407, 1220034506, 1220034402,1220034502, 1220032204, 1220032304, 1220032203, 1220032303,1220032202, 1220032302, 1220032201, 1220032301, 1220029602,1220029702, 1220029601, 1220029701, 1220026203, 1220026303,1220026202, 1220026302, 1220026201, 1220026301, 1220022902,1220023002, 1220022901, 1220023001, 1220019802, 1220019902,1220019801, 1220019901, 1220013403, 1220013504, 1220013404,1220013503, 1220013401, 1220013501],
    "도곡로" : [1220015401, 1220015501, 1220015402, 1220015502, 1220015403, 1220015503,1220016601, 1220016701, 1220016602, 1220016702, 1220019004, 1220019103,1220019003, 1220019104, 1220019002, 1220019102, 1220020801, 1220020901,1220020802, 1220020902, 1220020803, 1220020903, 1220022501, 1220022601,1220022504, 1220022605, 1220022503, 1220022603, 1220024203, 1220024302,1220024205, 1220024304, 1220024204, 1220025601, 1220025701, 1220024305],
    "도산로" : [1220032606, 1220032603, 1220032604, 1220032605, 1220032707, 1220032703,1220032704, 1220032705, 1220033602, 1220033603, 1220033701, 1220033702,1220034202, 1220034302, 1220034203, 1220034303, 1220034204, 1220034304,1220034601, 1220034701, 1220034602, 1220034702, 1220034603, 1220034703,1220034801, 1220034901, 1220034802, 1220034902, 1220034803, 1220034903],
    "봉은사로": [1220027201, 1220027301, 1220027202, 1220027302, 1220027203, 1220027303,1220028201, 1220028301, 1220028202, 1220028302, 1220029001, 1220029102,1220029002, 1220029103, 1220029003, 1220029104, 1220030001, 1220030101,1220030002, 1220030102, 1220030003, 1220030103, 1220030801, 1220030901,1220030802, 1220030902],
    "삼성로" : [1220034002, 1220034102, 1220034001, 1220034101, 1220031804, 1220031904,1220031803, 1220031903, 1220031802, 1220031902, 1220031801, 1220031901,1220029302, 1220029202, 1220029201, 1220029301, 1220026603, 1220026703,1220026602, 1220026702, 1220026601, 1220026701, 1220024803, 1220024903,1220024802, 1220024902, 1220024801, 1220024901, 1220021802, 1220021903,1220021801, 1220021902],
    "선릉로" : [1220036500, 1220036400, 1220035404, 1220035504, 1220035403, 1220035503,1220035402, 1220035502, 1220035401, 1220035501, 1220033403, 1220033503,1220033402, 1220033502, 1220033401, 1220033501, 1220031005, 1220031105,1220031004, 1220031104, 1220031003, 1220031103, 1220031002, 1220031102,1220031001, 1220031101, 1220027603, 1220027703, 1220027602, 1220027702,1220027601, 1220027701, 1220025804, 1220025904, 1220025803, 1220025903,1220025802, 1220025902, 1220025801, 1220025901, 1220023104, 1220023204,1220023103, 1220023203, 1220023101, 1220023201, 1220019300, 1220019200],
    "압구정로" :[1220035001, 1220035002, 1220035003, 1220035004, 1220035101, 1220035102,1220035103, 1220035104, 1220036002, 1220036003, 1220036004, 1220036005,1220036101, 1220036102, 1220036103, 1220036104, 1220036301, 1220036303,1220036304, 1220036305, 1220036306, 1220036201, 1220036202, 1220036203,1220036204, 1220036205, 1220036206, 1220035904, 1220035903, 1220035902,1220035901, 1220035803, 1220035802, 1220035801, 1220035804],
    "역삼로": [1220027001,1220027002,1220027101,1220027102,1220026400,1220026500,1220025403,1220025503,1220025402,1220025502,1220025401,1220025501,1220023801,1220023802,1220023901,1220023902,1220022200,1220022300,1220020600,1220020700,1220019401,1220019402,1220019501,1220019502],
    "영동대로": [1220004102,1220004002,1220004001,1220004101,1220003303,1220003403,1220003302,1220003402,1220003104,1220003204],
    "온주로" : [1220036802, 1220036902, 1220036801, 1220036901, 1220035205, 1220035305,1220035204, 1220035304, 1220035203, 1220035303, 1220035202, 1220035302,1220033004, 1220033104, 1220033003, 1220033103, 1220033002, 1220033102,1220033001, 1220033101, 1220029805, 1220029904, 1220029804, 1220029903,1220029803, 1220029902, 1220029802, 1220029901, 1220027404, 1220027504,1220027403, 1220027503, 1220027402, 1220027502, 1220027401, 1220027501,1220024602, 1220024702, 1220024601, 1220024701, 1220021404, 1220021504,1220021403, 1220021503, 1220021402, 1220021502, 1220021401, 1220021501,1220016002, 1220016102],
    "테헤란로" : [1220023302, 1220023402, 1220024001, 1220024101, 1220024002, 1220024102,1220024003, 1220024103, 1220025201, 1220025202, 1220025301, 1220025302,1220025203, 1220025303, 1220026005, 1220026104, 1220026004, 1220026105,1220026002, 1220026102, 1220026003, 1220026103, 1220026801, 1220026901,1220026802, 1220026902, 1220026803, 1220026903, 1220026904, 1220026804,1220028005, 1220028104, 1220028004, 1220028105, 1220028002, 1220028102,1220028003, 1220028103, 1220028802, 1220028902, 1220028803, 1220028903,1220078500, 1220078400],
    "학동로" : [1220030407, 1220030506, 1220030406, 1220030507, 1220030402, 1220030502,1220030403, 1220030503, 1220030404, 1220030504, 1220030405, 1220030505,1220031201, 1220031301, 1220031202, 1220031302, 1220032001, 1220032101,1220032002, 1220032102, 1220032003, 1220032103, 1220032801, 1220032901,1220032802, 1220032902, 1220032803, 1220032903, 1220032804, 1220032904,1220032805, 1220032905, 1220033201, 1220033301, 1220033202, 1220033302]
}
# fmt: on


@bp.route("/test", methods=["GET"])
def test():
    return {"message": "Test SuccessFull"}, 200


@bp.route("/map", methods=["GET"])
def get_map_data():

    road_name = request.args.get("roadName")
    interval = request.args.get("interval")
    if not road_name:
        return jsonify({"message": "파라미터로 road_name에 넣어주세요"}), 400

    road_ids = road_name_to_ids.get(road_name, [])

    grouped_data = get_traffic_data(interval, road_name)

    edges = grouped_data[["id", "traffic_volume", "congestion_level"]].to_dict(
        orient="records"
    )
    response_data = {
        "interval": interval,  # 문자열일 수도 있으니, 필요하면 int로 변환
        "road_name": road_name,
        "road_ids": road_ids,
        "edges": edges,
    }

    # JSON 응답 반환
    return jsonify(response_data), 200


@bp.route("/graph", methods=["GET"])
def get_graph_data():
    road_name = request.args.get("roadName")
    if not road_name:
        return jsonify({"message": "road_name 파라미터는 필수입니다."}), 400

    road_ids = road_name_to_ids.get(road_name)
    if not road_ids:
        return jsonify({"error": f"'{road_name}'에 해당하는 도로정보가 없습니다."}), 400

    grouped_data = get_data_with_hours(road_name, road_ids)

    result = grouped_data.to_dict(orient="records")
    return jsonify(result), 200
